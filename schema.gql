type Group {
  id: ID!
  name: String!
  creatorId: String!
  userIds: [String!]!
  groupIds: [String!]!
}

type Tweet {
  id: TweetID!
  authorId: String!
  content: String!
  hashtags: [String!]
  parentTweetId: String
  category: TweetCategory
  location: String
}

"""
Custom scalar for validating Tweet IDs in the format {rootAuthorId}_{tweetId}
"""
scalar TweetID

enum TweetCategory {
  SPORT
  FINANCE
  TECH
  NEWS
}

type PaginatedTweet {
  nodes: [Tweet!]!
  hasNextPage: Boolean!
}

type User {
  id: ID!
  username: String!
  email: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  getUsers: [User!]!
  getUser(id: String!): User
  getGroupsByCreator(creatorId: String!): [Group!]!
  paginateTweets(input: PaginateTweets!): PaginatedTweet!
  paginateTweetsWithCursor(input: PaginateTweetsWithCursor!): PaginatedTweet!
}

input PaginateTweets {
  userId: String!
  page: Float!
  limit: Float!
  filter: FilterTweet
}

input FilterTweet {
  authorId: String
  hashtag: String
  parentTweetId: String
  category: TweetCategory
  location: String
}

input PaginateTweetsWithCursor {
  userId: String!
  cursor: String!
  limit: Float!
  filter: FilterTweet
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  createGroup(input: CreateGroupInput!): Group!
  createTweet(input: CreateTweetInput!): Tweet!
  updateTweetPermissions(tweetId: TweetID!, input: UpdateTweetPermissionsInput!): Boolean!
}

input CreateUserInput {
  username: String!
  email: String!
}

input CreateGroupInput {
  creatorId: String!
  name: String!
  userIds: [String!]!
  groupIds: [String!]!
}

input CreateTweetInput {
  authorId: String!
  content: String!
  hashtags: [String!]
  parentTweetId: String
  category: TweetCategory
  location: String
}

input UpdateTweetPermissionsInput {
  inheritViewPermissions: Boolean!
  inheritEditPermissions: Boolean!
  viewPermissions: [String!]!
  editPermissions: [String!]!
}